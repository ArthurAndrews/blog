library(tidyverse)
load("data/hitting_stats.RData")
View(hit)
source("~/blog/scripts/model_aging.R", echo=TRUE)
source("~/blog/scripts/model_aging.R", echo=TRUE)
#| warning: false
#| message: false
library(tidyverse)
library(broom.mixed)
library(janitor)
library(splines)
library(factoextra)
library(reactable)
library(ggsci)
library(magrittr, include.only = "set_rownames")
library(lme4, exclude = c("expand", "pack", "unpack"))
library(htmltools, include.only = "css")
library(pracma, include.only = c("fzero", "fderiv"))
theme_set(theme_bw(base_size = 12))
load("data/hitting_stats.RData")
add_prediction <- function(hit, model, ...) {
hit$pred_ops <- predict(model, hit, ...)
hit
}
tabulate <- partial(
reactable,
fullWidth = FALSE, highlight = TRUE, style = css(fontSize = "80%")
)
hit <- hit |>
filter(n_seasons >= 5)
hit |>
group_by(season) |>
summarize(rows = n(), hitters = n_distinct(id)) |>
tabulate(defaultPageSize = 15)
#| warning: false
#| message: false
library(tidyverse)
library(broom.mixed)
library(janitor)
library(splines)
library(factoextra)
library(reactable)
library(ggsci)
library(magrittr, include.only = "set_rownames")
library(lme4, exclude = c("expand", "pack", "unpack"))
library(htmltools, include.only = "css")
library(pracma, include.only = c("fzero", "fderiv"))
theme_set(theme_bw(base_size = 12))
load("data/hitting_stats.RData")
load("../../data/hitting_stats.RData")
#| warning: false
#| message: false
library(tidyverse)
library(broom.mixed)
library(janitor)
library(splines)
library(factoextra)
library(reactable)
library(ggsci)
library(magrittr, include.only = "set_rownames")
library(lme4, exclude = c("expand", "pack", "unpack"))
library(htmltools, include.only = "css")
library(pracma, include.only = c("fzero", "fderiv"))
theme_set(theme_bw(base_size = 12))
load("../../data/hitting_stats.RData")
add_prediction <- function(hit, model, ...) {
hit$pred_ops <- predict(model, hit, ...)
hit
}
tabulate <- partial(
reactable,
fullWidth = FALSE, highlight = TRUE, style = css(fontSize = "80%")
)
hit <- hit |>
filter(n_seasons >= 5)
hit |>
group_by(season) |>
summarize(rows = n(), hitters = n_distinct(id)) |>
tabulate(defaultPageSize = 15)
glimpse(hit)
bind_cols(
hit |>
select(age),
hit$centered_age |>
bs(3)
) |>
pivot_longer(-age, names_to = "spline") |>
ggplot() + aes(age, value, color = spline) + geom_line()
model1 <- lmer(
ops ~ (1 | name) + bs(centered_age, df = 3),
data = hit
)
model1
pal <- pal_d3()(10)
mean_player <- hit |>
add_prediction(model1, re.form = ~0)
mean_player |>
ggplot() + aes(age, pred_ops) + geom_line(color = pal[2]) +
labs(title = "modeled aging curve", y = "ops") +
scale_y_continuous(labels = scales::label_number(accuracy = 0.001))
model1 |>
tidy("fixed") |>
mutate(across(where(is.numeric), \(x) round(x, 3))) |>
tabulate()
model1 |>
tidy("ran_vals") |>
mutate(across(where(is.numeric), \(x) round(x, 3))) |>
arrange(desc(estimate)) |>
tabulate(columns = list(level = colDef(minWidth = 150, filterable = TRUE)))
predict_ops <- function(age, model) {
tibble(centered_age = age - mean(hit$age)) |>
predict(object = model, re.form = ~0)
}
calc_ops_deriv <- function(age, model) {
partial(predict_ops, model = model) |> # now a function of only age
fderiv(age)
}
calc_zero_deriv <- function(model) {
partial(calc_ops_deriv, model = model) |> # now a function of only age
fzero(x = 30) |>
pluck("x")
}
cat("age of peak performance: ")
model1 |>
calc_zero_deriv() |>
cat()
grouped_hit <- hit |>
group_by(age = round(age)) |>
mutate(player_contribution = pa / sum(pa))
aggregate_player <- grouped_hit |>
summarize(
across(c(avg, obp, slg, ops), \(x) weighted.mean(x, pa)),
.groups = "drop"
)
aggregate_player |>
ggplot() + aes(age, ops) + geom_line(color = pal[1]) +
labs(title = "ops aggregated by player age")
tabulate_one_age <- function(ages) {
grouped_hit |>
filter(age %in% ages) |>
slice_max(player_contribution, n = 5) |>
select(age, name, player_contribution) |>
tabulate(
columns = list(
name = colDef(minWidth = 150),
player_contribution = colDef(
"player contribution",
format = colFormat(percent = TRUE, digits = 1)
)
)
)
}
tabulate_one_age(20)
tabulate_one_age(21)
tabulate_one_age(38)
tabulate_one_age(39)
aging <- aggregate_player |>
mutate(
centered_age = age - mean(hit$age),
pred_ops = tibble(centered_age) |>
predict(object = model1, re.form = ~0)
)
aging |>
select(age, modeled = pred_ops, aggregate = ops) |>
pivot_longer(-age) |>
mutate(name = factor(name, c("aggregate", "modeled"))) |>
ggplot() + aes(age, value, color = name) + geom_line() + scale_color_d3() +
labs(y = "ops", title = "modeled and aggregate ops aging")
model2 <- lmer(
ops ~ (centered_age | name) + bs(centered_age, df = 3),
data = hit
)
model2
cf <- model2 |>
tidy("ran_vals") |>
filter(term == "centered_age") |>
mutate(across(where(is.numeric), \(x) round(x, 4))) |>
arrange(desc(estimate))
cf |>
tabulate(columns = list(level = colDef(minWidth = 150)))
predict_player <- function(players, model) {
mean_player <- hit |>
distinct(age, centered_age) |>
mutate(
mean_player = tibble(centered_age) |>
predict(object = model, re.form = ~0)
)
hit |>
filter(name %in% players) |>
left_join(cf, by = join_by(name == level)) |>
mutate(
player = tibble(name, age, centered_age) |>
predict(object = model),
name = name |>
reorder(-abs(estimate))
) |>
ggplot() +
aes(x = age, color = "player") + geom_point(aes(y = ops)) + geom_line(aes(y = player)) +
geom_line(aes(x = age, y = mean_player, color = "mean_player"), data = mean_player) +
scale_color_manual(values = c("player" = "grey30", "mean_player" = pal[2])) +
facet_wrap(~name + estimate)
}
predict_player("Miguel Cabrera", model2)
#| fig-width: 10
#| fig-height: 8
cf |>
slice_max(estimate, n = 16, with_ties = FALSE) |>
pull(level) |>
predict_player(model2)
#| fig-width: 10
#| fig-height: 8
cf |>
slice_min(estimate, n = 16, with_ties = FALSE) |>
pull(level) |>
predict_player(model2)
# model4 <- lmer(
#   ops ~ (centered_age | position/name) + bs(centered_age, df = 3),
#   data = hit
# )
# hit |>
#   distinct(position, age, centered_age) |>
#   mutate(name = NA_character_) |>
#   add_prediction(model4, allow.new.levels = TRUE) |>
#   ggplot() +
#   aes(age, pred_ops, color = position) + geom_line() #+
#   #facet_wrap(~position)
save(model1, model2, file = "../../data/ops_models.RData")
save(hit, model1, model2, file = "../../data/ops_models.RData")
model2 |> formula()
model1 |> formula()
coef(model2)
library(tidyverse)
library(lme4)
load("../../data/models.RData")
load("../../data/ops_models.RData")
load("../../data/hitting_stats.RData")
hit
load("../../data/ops_models.RData")
#load("../../data/hitting_stats.RData")
form <- formula(model2)
model <- lmer(form, data = hit |> filter(season < 2024))
form
model
hit
hit <- hit |>
group_by(name) |>
mutate(
lagged_ops = lag(ops),
mean_ops = mean(ops[season < 2024])
)
hit$pred_ops <- predict(model, hit)
library(yardstick)
hit |>
summarize(
across(
c(lagged_ops, mean_ops, pred_ops),
\(x) rmse(x, ops)
)
)
hit |>
summarize(
across(
c(lagged_ops, mean_ops, pred_ops),
\(x) rmse_vec(ops, x)
)
)
hit
hit <- hit |> ungroup()
hit |>
summarize(
across(
c(lagged_ops, mean_ops, pred_ops),
\(x) rmse_vec(ops, x)
)
)
hit |>
select(contains("ops"))
hit |>
select(contains("ops")) |>
pivot_longer(-ops)
hit |>
select(name, contains("ops")) |>
pivot_longer(-ops)
hit |>
select(name, contains("ops")) |>
pivot_longer(-c(name, ops))
hit |>
select(player = name, contains("ops")) |>
pivot_longer(-c(player, ops))
hit <- hit |>
group_by(name) |>
mutate(
lagged_ops = lag(ops),
mean_ops = mean(ops[season < 2024])
) |>
ungroup() |>
mutate(population_ops = mean(ops[season < 2024]))
hit$pred_ops <- predict(model, hit)
hit |>
summarize(
across(
c(lagged_ops, mean_ops, pred_ops),
\(x) rmse_vec(ops, x)
)
)
hit |>
select(player = name, contains("ops")) |>
pivot_longer(-c(player, ops)) |>
group_by(name) |>
summarize(
rmse = rmse_vec(ops, value),
r2 = rsq_trad_vec(ops, value)
)
hit |>
filter(season == 2024) |>
select(player = name, contains("ops")) |>
pivot_longer(-c(player, ops)) |>
group_by(name) |>
summarize(
rmse = rmse_vec(ops, value),
r2 = rsq_trad_vec(ops, value)
)
hit |>
filter(season == 2024) |>
select(player = name, contains("ops")) |>
pivot_longer(-c(player, ops)) |>
group_by(name) |>
summarize(
rmse = rmse_vec(ops, value),
r2 = rsq_trad_vec(ops, value)
) |>
arrange(desc(rmse))
hit |>
filter(season == 2024) |>
select(player = name, contains("ops")) |>
pivot_longer(-c(player, ops)) |>
group_by(name) |>
summarize(
rmse = rmse_vec(ops, value),
r2 = rsq_trad_vec(ops, value)
) |>
arrange(rmse)
load("data/hitting_stats.RData")
load("data/hitting_stats.RData")
hit |>
filter(season == 2024) |>
arrange(desc(ops))
source("~/blog/scripts/test_icons.R", echo=TRUE)
source("~/blog/scripts/test_icons.R", echo=TRUE)
hit |>
filter(season == 2024) |>
arrange(desc(ops)) |>
select(name, team = team_name, position, ops)
icons <- dir("images", "*.png")
icons
hit |> distinct(team_name) |> arrange(team_name)
hit |> distinct(team_name) |> arrange(team_name) |> pull(team_name)
hit |> distinct(team_name) |> arrange(team_name) |> pull(team_name) |> t()
hit |> distinct(team_name) |> arrange(team_name) |> pull(team_name) |> t() |> t()
hit |> distinct(team_name) |> arrange(team_name) |> pull(team_name) |> t() |> t() |> cat()
hit |> distinct(team_name) |> arrange(team_name) |> pull(team_name) |> str_flatten("\n") |> cat()
id <- 592450
headshot_url <- str_glue("https://img.mlbstatic.com/mlb-photos/image/upload/w_213,d_people:generic:headshot:silo:current.png,q_auto:best,f_auto/v1/people/{id}/headshot/67/current"}
headshot_url <- str_glue(
"https://img.mlbstatic.com/mlb-photos/image/upload/w_213,d_people:generic:headshot:silo:current.png,q_auto:best,f_auto/v1/people/{id}/headshot/67/current"
)
headshot_url
library(htmltools)
img(src = headshot_url) |>
browsable()
library(htmlwidgets)
img(src = headshot_url) |>
browsable()
library(htmltools)
library(htmlwidgets)
img(src = headshot_url) |>
browsable()
library(htmltools)
library(htmltools)
img(src = headshot_url) |>
browsable()
leaders <- hit |>
filter(season == 2024) |>
arrange(desc(ops)) |>
select(name, team = team_name, position, ops)
leaders |>
head(1)
leaders <- hit |>
filter(season == 2024) |>
arrange(desc(ops)) |>
select(name, team = team_name, position, ops)
library(tidyverse)
library(reactable)
leaders <- hit |>
filter(season == 2024) |>
arrange(desc(ops)) |>
select(name, team = team_name, position, ops)
leaders |>
head(1)
leaders |>
head(1) |>
mutate(headshot = img(src = headshot_url))
leaders |>
head(1) |>
mutate(headshot = as_character(img(src = headshot_url)))
leaders |>
head(1) |>
mutate(headshot = as.character(img(src = headshot_url)))
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url)),
logo = as.character(img(src = "../images/yankees.png"))
)
dir("../images")
dir("../../images")
dir()
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url)),
logo = as.character(img(src = "images/yankees.png"))
)
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url)),
logo = as.character(img(src = "images/yankees.png"))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
)
dir("images")
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "20%"))),
logo = as.character(img(src = "images/yankees.png"))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
)
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "40%"))),
logo = as.character(img(src = "images/yankees.png"))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
)
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "40%"))),
logo = as.character(img(src = "images/yankees.png"))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
) |>
save_html("test.html")
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "25%"))),
logo = as.character(img(src = "images/yankees.png", style = css(width = "50%")))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
) |>
save_html("test.html")
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "25%"))),
logo = as.character(img(src = "images/yankees.png", style = css(width = "20%")))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
) |>
save_html("test.html")
leaders |>
head(1) |>
mutate(
headshot = as.character(img(src = headshot_url, style = css(width = "20%"))),
logo = as.character(img(src = "images/yankees.png", style = css(width = "20%")))
) |>
reactable(
columns = list(
headshot = colDef(html = TRUE),
logo = colDef(html = TRUE)
)
) |>
save_html("test.html")
